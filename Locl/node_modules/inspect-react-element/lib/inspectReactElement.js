'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = inspectReactElement;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodashOmit = require('lodash.omit');

var _lodashOmit2 = _interopRequireDefault(_lodashOmit);

var _indentString = require('indent-string');

var _indentString2 = _interopRequireDefault(_indentString);

function inspectReactProp(propName, propValue) {
  if (typeof propValue == 'string') return propName + '="' + propValue + '"';
  return propName + '={' + _util2['default'].inspect(propValue) + '}';
}

function inspectReactType(type) {
  if (!type) return '' + type;
  return typeof type == 'string' ? type : type.name || type.displayName;
}

function inspectReactNode(node) {
  var depth = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

  if (!_react2['default'].isValidElement(node)) {
    var childInspected = _util2['default'].inspect(node);
    var childText = depth > 0 ? '{' + childInspected + '}' : childInspected;
    return childText;
  }

  var props = node.props || {};
  var propNames = Object.keys((0, _lodashOmit2['default'])(props, 'children'));
  var propsText = propNames.length && propNames.map(function (propName) {
    return inspectReactProp(propName, props[propName]);
  }).join(' ');

  var childrenText = undefined;
  if (props.children) {
    (function () {
      var childrenInspected = [];
      _react2['default'].Children.forEach(props.children, function (node) {
        return childrenInspected.push(inspectReactNode(node, depth + 1));
      });
      childrenText = childrenInspected.join('\n');
    })();
  }

  var nodeText = '<';
  nodeText += inspectReactType(node.type);
  if (propsText) nodeText += ' ' + propsText;

  if (childrenText) {
    nodeText += '>\n';
    nodeText += (0, _indentString2['default'])(childrenText, '  ', 1);
    nodeText += '\n</' + inspectReactType(node.type) + '>';
  } else {
    nodeText += ' />';
  }
  return nodeText;
}

function inspectReactElement(element) {
  return inspectReactNode(element);
}

module.exports = exports['default'];